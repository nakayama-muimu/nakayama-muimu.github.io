// Generated by Haxe 4.0.3
(function ($hx_exports, $global) { "use strict";
var MnDialog = $hx_exports["MnDialog"] = function(width,height,id,cssPrefix) {
	if(height == null) {
		height = 20;
	}
	if(width == null) {
		width = 250;
	}
	this.id = "";
	this.colorBase = "#eeeeff";
	this.colorButton = "#6666ff";
	this.colorTitleText = "#ffffff";
	this.colorTitle = "#9999ff";
	var _gthis = this;
	if(id != null) {
		this.id = id;
	}
	if(cssPrefix != null) {
		this.cssPrefix = cssPrefix;
	} else {
		this.cssPrefix = "mndlg_" + new Date().getTime();
	}
	this.width = width;
	this.height = height;
	this.outputCSS(false);
	cssPrefix = this.cssPrefix + "_";
	this.divBG = window.document.createElement("div");
	this.divBG.className = cssPrefix + "bg";
	window.document.body.appendChild(this.divBG);
	this.divBase = window.document.createElement("div");
	this.divBase.className = cssPrefix + "base";
	if(this.id != "") {
		this.divBase.id = this.id;
	}
	this.divBG.appendChild(this.divBase);
	this.divTitle = window.document.createElement("div");
	this.divTitle.className = cssPrefix + "title";
	this.divTitle.textContent = "Title";
	this.divBase.appendChild(this.divTitle);
	this.divBody = window.document.createElement("div");
	this.divBody.innerHTML = "";
	this.divBody.className = cssPrefix + "body";
	this.divBase.appendChild(this.divBody);
	this.divButtons = window.document.createElement("div");
	this.divButtons.className = cssPrefix + "buttons";
	this.divBase.appendChild(this.divButtons);
	this.button1 = window.document.createElement("button");
	this.button1.textContent = "OK";
	this.button1.value = "OK";
	this.button1.className = cssPrefix + "button";
	this.button1.name = "button1";
	this.divButtons.appendChild(this.button1);
	this.button2 = window.document.createElement("button");
	this.button2.textContent = "Cancel";
	this.button2.value = "Cancel";
	this.button2.className = cssPrefix + "button";
	this.button2.name = "button2";
	this.divButtons.appendChild(this.button2);
	this.button3 = window.document.createElement("button");
	this.button3.textContent = "NO!";
	this.button3.value = "No";
	this.button3.className = cssPrefix + "button";
	this.button3.name = "button3";
	this.divButtons.appendChild(this.button3);
	var evAction = "click";
	if(Object.prototype.hasOwnProperty.call(window,"ontouchend")) {
		evAction = "touchend";
	}
	this.button1.addEventListener(evAction,function() {
		_gthis.onButtonPress(_gthis.button1);
	});
	this.button2.addEventListener(evAction,function() {
		_gthis.onButtonPress(_gthis.button2);
	});
	this.button3.addEventListener(evAction,function() {
		_gthis.onButtonPress(_gthis.button3);
	});
};
MnDialog.prototype = {
	setTitle: function(text) {
		if(text != null) {
			this.divTitle.textContent = text;
		}
	}
	,setBody: function(text) {
		if(text != null) {
			this.divBody.textContent = text;
		}
	}
	,setBodyHTML: function(htmlText) {
		if(htmlText != null) {
			this.divBody.innerHTML = htmlText;
		}
	}
	,setColor: function(colorBase,colorTitle,colorTitleText,colorButton) {
		if(colorBase != null && colorBase != "") {
			this.colorBase = colorBase;
		}
		if(colorTitle != null && colorTitle != "") {
			this.colorTitle = colorTitle;
		}
		if(colorTitleText != null && colorTitleText != "") {
			this.colorTitleText = colorTitleText;
		}
		if(colorButton != null && colorButton != "") {
			this.colorButton = colorButton;
		}
		this.outputCSS();
	}
	,outputCSS: function($delete) {
		if($delete == null) {
			$delete = true;
		}
		var oCSS = window.document.getElementById(this.cssPrefix);
		if(oCSS != null) {
			if(!$delete) {
				return;
			}
			window.document.head.removeChild(oCSS);
		}
		var cssPrefix = this.cssPrefix + "_";
		var css = "." + cssPrefix + "bg{\n    display: none;\n    background-color: rgba(0, 0, 0, 0.2);\n    position: fixed;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n}\n." + cssPrefix + "base{\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: " + this.width + "px;\n    min-height: " + this.height + "px;\n    transform: translate(-50%, -50%);\n    background-color: " + this.colorBase + ";\n    border: solid 2px " + this.colorTitle + ";\n    border-radius: 4px;\n    text-align: left;\n    font-size: 0.8rem;\n}\n." + cssPrefix + "title{\n    background-color: " + this.colorTitle + ";\n    color: " + this.colorTitleText + ";\n    padding: 3px;\n}\n." + cssPrefix + "body{\n    padding: 3px;\n    height: " + (this.height - 60) + "px;\n}\n." + cssPrefix + "buttons{\n    text-align: center;\n    padding: 3px;\n}\n." + cssPrefix + "button{\n    border-style: none;\n    color: " + this.colorTitleText + ";\n    background-color: " + this.colorTitle + ";\n    cursor: pointer;\n    border-radius: 4px;\n    min-width: 40px;\n    min-height: 20px;\n    margin: 4px;\n}\n." + cssPrefix + "button:hover{\n    background-color: " + this.colorButton + ";\n}";
		var style = window.document.createElement("style");
		style.id = this.cssPrefix;
		style.appendChild(window.document.createTextNode(css));
		window.document.head.appendChild(style);
		oCSS = window.document.getElementById(this.cssPrefix);
	}
	,setButtonType: function(btType,lang) {
		this.button2.style.display = "none";
		this.button3.style.display = "none";
		switch(btType) {
		case "OK":
			this.button1.textContent = "OK";
			this.button1.value = "OK";
			break;
		case "OKCancel":
			this.button1.textContent = "OK";
			this.button1.value = "OK";
			this.button2.style.display = "";
			this.button2.textContent = "キャンセル";
			this.button2.value = "Cancel";
			break;
		case "YesNo":
			this.button1.textContent = "はい";
			this.button1.value = "Yes";
			this.button2.style.display = "";
			this.button2.textContent = "いいえ";
			this.button2.value = "No";
			break;
		case "YesNoCancel":
			this.button1.textContent = "はい";
			this.button1.value = "Yes";
			this.button2.style.display = "";
			this.button2.textContent = "いいえ";
			this.button2.value = "No";
			this.button3.style.display = "";
			this.button3.textContent = "キャンセル";
			this.button3.value = "Cancel";
			break;
		}
	}
	,setButtonCallback: function(cbFunc) {
		this.cbButton = cbFunc;
	}
	,show: function() {
		this.divBG.style.display = "block";
	}
	,onButtonPress: function(button) {
		this.divBG.style.display = "none";
		if(this.cbButton != null) {
			this.cbButton.call(this,button.value);
		}
	}
	,onButtonPress_1: function(event) {
		this.divBG.style.display = "none";
		if(this.cbButton != null) {
			this.cbButton.call(this,event.target);
		}
	}
};
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});
